<#@ template language="C#" linePragmas="false" #>
<#@ parameter name="ControllerClassName" type="System.String" #>
<#@ parameter name="ShaderPathInternal" type="System.String" #>
<#@ parameter name="Properties" type="PropertyInfo[]" #>
//
// The script, <#= ControllerClassName #>.cs, has been auto-generated by the script ShaderControllerGenerator.cs from the Shader Controller Package
// 
// The class <#= ControllerClassName #> is a controller for the shader: <#= ShaderPathInternal #>.
// The tool does not check if there is already a controller for a shader.
// 
// It is recommended to not modify this script. Since all your changes will be erased if you update the controller.
//

using UnityEngine;

[RequireComponent(typeof(Renderer))]
public class <#= ControllerClassName #> : BaseShaderController
{
<#
	for (int i = 0; i < Properties.Length; i++)
	{
		if (Properties[i].isDecorator)
		{
#>
	<#= Properties[i].attribute #>
<#
		}
		else
		{
			switch (Properties[i].shaderType)
			{
				case UnityEngine.Rendering.ShaderPropertyType.Float:
#>
	[Tooltip("<#= Properties[i].description #>")]
	[SerializeField] private float <#= Properties[i].descriptionAsName #> = <#= Properties[i].values[0] #>f;

<#					break;
				case UnityEngine.Rendering.ShaderPropertyType.Color:
#>
	[Tooltip("<#= Properties[i].description #>")]
<#				if (string.IsNullOrEmpty(Properties[i].attribute) == false)
				{
#>
	<#= Properties[i].attribute #>
<#
				}
#>
	[SerializeField] private Color <#= Properties[i].descriptionAsName #> = new Color(<#= Properties[i].values[0] #>f, <#= Properties[i].values[1] #>f, <#= Properties[i].values[2] #>f, <#= Properties[i].values[3] #>f);

<#
					break;
				case UnityEngine.Rendering.ShaderPropertyType.Vector:
#>
	[Tooltip("<#= Properties[i].description #>")]
	[SerializeField] private Vector4  <#= Properties[i].descriptionAsName #> = new Vector4(<#= Properties[i].values[0] #>f, <#= Properties[i].values[1] #>f, <#= Properties[i].values[2] #>f, <#= Properties[i].values[3] #>f);

<#
				break;
			case UnityEngine.Rendering.ShaderPropertyType.Range:
#>
	[Tooltip("<#= Properties[i].description #>")]
	[Range(<#= Properties[i].values[1] #>f, <#= Properties[i].values[2] #>f)]
<#
			if (Properties[i].values[3] == 0.0f)
			{
#>
	[SerializeField] private float <#= Properties[i].descriptionAsName #> = <#= Properties[i].values[0] #>f;
	
<#
			}
			else
			{
#>
	[SerializeField] private int <#= Properties[i].descriptionAsName #> = <#= Properties[i].values[0] #>;

<#
			}
				break;
			default:
				break;
			}
		}
	}
#>


	protected override void Start()
	{
		shader = Shader.Find("<#= ShaderPathInternal #>");

		base.Start();
	}

	public override void SetupMaterial()
	{
		base.SetupMaterial();

		GetComponent<Renderer>().material = material;
	}

	public override void SetupInspectorValue()
	{
<#
	for (int i = 0; i < Properties.Length; i++)
	{
		if (Properties[i].isDecorator == false)
		{
			switch (Properties[i].shaderType)
			{
				case UnityEngine.Rendering.ShaderPropertyType.Float:
#>
		<#= Properties[i].descriptionAsName #> = material.GetFloat("<#= Properties[i].name #>");
<#	
					break;
				case UnityEngine.Rendering.ShaderPropertyType.Range:
					if (Properties[i].values[3] == 0.0f)
					{
#>
		<#= Properties[i].descriptionAsName #> = material.GetFloat("<#= Properties[i].name #>");
<#		
					}
					else
					{
#>
		<#= Properties[i].descriptionAsName #> = material.GetInt("<#= Properties[i].name #>");
<#
					}
					break;
				case UnityEngine.Rendering.ShaderPropertyType.Color:
#>
		<#= Properties[i].descriptionAsName #> = material.GetColor("<#= Properties[i].name #>");
<#
					break;
				case UnityEngine.Rendering.ShaderPropertyType.Vector:
#>
		<#= Properties[i].descriptionAsName #> = material.GetVector("<#= Properties[i].name #>");
<#
				break;
			default:
				break;
			}
		}
	}
#>
	}

	private void Update()
	{
<#
	for (int i = 0; i < Properties.Length; i++)
	{
		if (Properties[i].isDecorator == false)
		{
			switch (Properties[i].shaderType)
			{
				case UnityEngine.Rendering.ShaderPropertyType.Float:
				case UnityEngine.Rendering.ShaderPropertyType.Range:
#>
		material.SetFloat("<#= Properties[i].name #>", <#= Properties[i].descriptionAsName #>);
<#					break;
				case UnityEngine.Rendering.ShaderPropertyType.Color:
#>
		material.SetColor("<#= Properties[i].name #>", <#= Properties[i].descriptionAsName #>);
<#
					break;
				case UnityEngine.Rendering.ShaderPropertyType.Vector:
#>
		material.SetVector("<#= Properties[i].name #>", <#= Properties[i].descriptionAsName #>);
<#
				break;
			default:
				break;
			}
		}
	}
#>
	}
}