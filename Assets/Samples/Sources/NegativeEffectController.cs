//
// The script, NegativeEffectController.cs, has been auto-generated by the script PostProcessControllerGenerator.cs from the Shader Controller Package
// 
// The class NegativeEffectController is a controller for the shader: Unlit/NegativeEffect.
// The tool does not check if there is already a controller for a shader.
// 
// It is recommended to not modify this script. Since all your changes will be erased if you update the controller.
//

using UnityEngine;

[RequireComponent(typeof(Camera))]
public class NegativeEffectController : BaseShaderController
{
	[Tooltip("Negative Effect Power")]
	[Range(0f, 1f)]
	[SerializeField] private float negativeEffectPower = 0f;
	
	[Tooltip("Negative Color")]
	[SerializeField] private Color negativeColor = new Color(1f, 1f, 1f, 1f);


	protected override void Start()
	{
#if UNITY_EDITOR
		isPostProcessController = true;
#endif
		shader = Shader.Find("Unlit/NegativeEffect");

		base.Start();
	}

	public override void SetupMaterial()
	{
		base.SetupMaterial();
	}

	public override void SetupInspectorValue()
	{
		negativeEffectPower = material.GetFloat("_NegativeEffectPower");
		negativeColor = material.GetColor("_NegativeColor");
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		material.SetFloat("_NegativeEffectPower", negativeEffectPower);
		material.SetColor("_NegativeColor", negativeColor);

		Graphics.Blit(source, destination, material);
	}
}